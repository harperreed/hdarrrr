name: HDR Image Processing

on:
    pull_request:
        types: [opened, synchronize]
        paths:
            - "**.go"
            - "go.mod"
            - "go.sum"
            - ".github/workflows/hdr-processing.yml"

# Environment variables for reusability and easier maintenance
env:
    GO_VERSION: "1.21"
    INPUT_DIR: "examples/input"
    OUTPUT_DIR: "examples/output"
    OUTPUT_FILE: "hdr_result.jpg"
    TEST_IMAGES:
        low: "https://www.easyhdr.com/examples/pond/pondlow.jpg"
        mid: "https://www.easyhdr.com/examples/pond/pondmid.jpg"
        high: "https://www.easyhdr.com/examples/pond/pondhigh.jpg"

jobs:
    process-hdr:
        runs-on: ubuntu-latest

        # Timeout after 10 minutes to prevent hung jobs
        timeout-minutes: 10

        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1 # Shallow clone for faster checkout

            - name: Set up Go
              id: go-setup
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  check-latest: true
                  cache: true # Enable Go module caching

            - name: Verify Go installation
              run: |
                  go version
                  if [ $? -ne 0 ]; then
                    echo "::error::Go installation failed"
                    exit 1
                  fi

            - name: Run tests
              id: tests
              run: |
                  go test -v -race -timeout 5m ./...
              continue-on-error: false

            - name: Setup directories
              id: setup-dirs
              run: |
                  mkdir -p "${{ env.INPUT_DIR }}" "${{ env.OUTPUT_DIR }}"
                  if [ ! -d "${{ env.INPUT_DIR }}" ] || [ ! -d "${{ env.OUTPUT_DIR }}" ]; then
                    echo "::error::Failed to create required directories"
                    exit 1
                  fi

            - name: Download test images
              id: download-images
              run: |
                  download_image() {
                    local exposure=$1
                    local url=$2
                    local output="${{ env.INPUT_DIR }}/${exposure}.jpg"
                    
                    echo "Downloading ${exposure} exposure image..."
                    if ! curl -sSL --retry 3 --retry-delay 2 -f -o "$output" "$url"; then
                      echo "::error::Failed to download ${exposure} exposure image from ${url}"
                      return 1
                    fi
                    
                    if ! file "$output" | grep -qi "JPEG image data"; then
                      echo "::error::Downloaded file is not a valid JPEG: ${output}"
                      return 1
                    fi
                    
                    echo "Successfully downloaded and verified ${exposure} exposure image"
                    return 0
                  }

                  # Download all images in parallel with error handling
                  pids=()
                  for exposure in "low" "mid" "high"; do
                    url="${{ env.TEST_IMAGES[exposure] }}"
                    download_image "$exposure" "$url" &
                    pids+=($!)
                  done

                  # Wait for all downloads and check results
                  for pid in "${pids[@]}"; do
                    if ! wait "$pid"; then
                      echo "::error::One or more image downloads failed"
                      exit 1
                    fi
                  done

            - name: Process HDR image
              id: process-hdr
              run: |
                  echo "Starting HDR processing..."

                  # Process with timeout and error handling
                  timeout 300s go run ./cmd/hdarrrr/main.go \
                    -low "${{ env.INPUT_DIR }}/low.jpg" \
                    -mid "${{ env.INPUT_DIR }}/mid.jpg" \
                    -high "${{ env.INPUT_DIR }}/high.jpg" \
                    -output "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"

                  if [ $? -ne 0 ]; then
                    echo "::error::HDR processing failed or timed out"
                    exit 1
                  fi

                  # Verify output
                  output_file="${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"
                  if [ ! -f "$output_file" ]; then
                    echo "::error::Output file was not created: $output_file"
                    exit 1
                  fi

                  if ! file "$output_file" | grep -qi "JPEG image data"; then
                    echo "::error::Output is not a valid JPEG file"
                    exit 1
                  fi

                  # Get file size using Linux stat command
                  size=$(stat -c%s "$output_file")
                  echo "size=$size" >> $GITHUB_OUTPUT
                  echo "HDR processing completed successfully. Output size: $size bytes"

            - name: Prepare image for comment
              id: prepare-image
              run: |
                  output_file="${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"

                  # Compress image if it's too large for GitHub comment
                  max_size=$((1024 * 1024))  # 1MB limit
                  current_size=$(stat -c%s "$output_file")

                  if [ "$current_size" -gt "$max_size" ]; then
                    echo "Image too large for direct embedding, compressing..."
                    convert "$output_file" -quality 80 -resize "1200>" "$output_file.compressed.jpg"
                    output_file="$output_file.compressed.jpg"
                  fi

                  # Create data URL
                  mime_type="image/jpeg"
                  base64_image=$(base64 -w 0 "$output_file")
                  echo "image_data=data:${mime_type};base64,${base64_image}" >> $GITHUB_OUTPUT

            - name: Find existing comment
              uses: peter-evans/find-comment@v2
              id: find-comment
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  comment-author: "github-actions[bot]"
                  body-includes: "HDR Processing Result"

            - name: Update PR with result
              uses: peter-evans/create-or-update-comment@v3
              with:
                  comment-id: ${{ steps.find-comment.outputs.comment-id }}
                  issue-number: ${{ github.event.pull_request.number }}
                  body: |
                      ## HDR Processing Result

                      Generated at: ${{ github.event.pull_request.updated_at }}
                      File size: ${{ steps.process-hdr.outputs.size }} bytes

                      ![HDR Result](${{ steps.prepare-image.outputs.image_data }})

                      <details>
                      <summary>Processing Details</summary>

                      - Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
                      - Commit: ${{ github.sha }}
                      - Branch: ${{ github.head_ref }}
                      - Go Version: ${{ steps.go-setup.outputs.go-version }}
                      - Duration: ${{ job.duration }}
                      </details>
                  edit-mode: replace
