name: HDR Image Processing (fixed)

on:
    pull_request:
        branches:
            - "**"

env:
    GO_VERSION: "1.21"
    INPUT_DIR: "examples/input"
    OUTPUT_DIR: "examples/output"
    OUTPUT_FILE: "hdr_result.jpg"
    TEST_IMAGE_LOW: "https://www.easyhdr.com/examples/pond/pond2.jpg"
    TEST_IMAGE_MID: "https://www.easyhdr.com/examples/pond/pond1.jpg"
    TEST_IMAGE_HIGH: "https://www.easyhdr.com/examples/pond/pond3.jpg"

jobs:
    process-hdr:
        runs-on: ubuntu-latest
        timeout-minutes: 10

        permissions:
            contents: read
            pull-requests: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            - name: Set up Go
              id: go-setup
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  check-latest: true
                  cache: true

            - name: Verify Go installation
              run: |
                  go version
                  if [ $? -ne 0 ]; then
                    echo "::error::Go installation failed"
                    exit 1
                  fi

            - name: Run tests
              id: tests
              run: |
                  go test -v -race -timeout 5m ./...
              continue-on-error: false

            - name: Setup directories
              id: setup-dirs
              run: |
                  mkdir -p "${{ env.INPUT_DIR }}" "${{ env.OUTPUT_DIR }}"
                  if [ ! -d "${{ env.INPUT_DIR }}" ] || [ ! -d "${{ env.OUTPUT_DIR }}" ]; then
                    echo "::error::Failed to create required directories"
                    exit 1
                  fi

            - name: Download test images
              id: download-images
              run: |
                  download_image() {
                    local exposure=$1
                    local url=$2
                    local output="${{ env.INPUT_DIR }}/${exposure}.jpg"
                    
                    echo "Downloading ${exposure} exposure image..."
                    if ! curl -sSL --retry 3 --retry-delay 2 -f -o "$output" "$url"; then
                      echo "::error::Failed to download ${exposure} exposure image from ${url}"
                      return 1
                    fi
                    
                    if ! file "$output" | grep -qi "JPEG image data"; then
                      echo "::error::Downloaded file is not a valid JPEG: ${output}"
                      return 1
                    fi
                    
                    echo "Successfully downloaded and verified ${exposure} exposure image"
                    return 0
                  }

                  download_image "low" "${{ env.TEST_IMAGE_LOW }}" &
                  pid1=$!
                  download_image "mid" "${{ env.TEST_IMAGE_MID }}" &
                  pid2=$!
                  download_image "high" "${{ env.TEST_IMAGE_HIGH }}" &
                  pid3=$!

                  for pid in $pid1 $pid2 $pid3; do
                    if ! wait "$pid"; then
                      echo "::error::One or more image downloads failed"
                      exit 1
                    fi
                  done

            - name: Process HDR image
              id: process-hdr
              run: |
                  echo "Starting HDR processing..."

                  timeout 300s go run ./cmd/hdarrrr/main.go \
                    -low "${{ env.INPUT_DIR }}/low.jpg" \
                    -mid "${{ env.INPUT_DIR }}/mid.jpg" \
                    -high "${{ env.INPUT_DIR }}/high.jpg" \
                    -output "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"

                  exit_code=$?
                  if [ $exit_code -ne 0 ]; then
                    echo "::error::HDR processing failed with exit code $exit_code"
                    exit 1
                  fi

                  output_file="${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"
                  if [ ! -f "$output_file" ]; then
                    echo "::error::Output file was not created: $output_file"
                    exit 1
                  fi

                  if ! file "$output_file" | grep -qi "JPEG image data"; then
                    echo "::error::Output is not a valid JPEG file"
                    exit 1
                  fi

                  # Get file size
                  size=$(stat -c%s "$output_file")
                  echo "size=$size" >> $GITHUB_OUTPUT
                  echo "HDR processing completed successfully. Output size: $size bytes"

            - name: Upload HDR result to ImgBB
              id: upload-hdr
              uses: McCzarny/upload-image@v1.0.0
              with:
                  path: ${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}
                  uploadMethod: imgbb
                  apiKey: ${{ secrets.IMGBB_API_KEY }}

            - name: Find existing comment
              uses: peter-evans/find-comment@v2
              id: find-comment
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  comment-author: "github-actions[bot]"
                  body-includes: "HDR Processing Result"

            - name: Update PR with result
              uses: peter-evans/create-or-update-comment@v3
              with:
                  comment-id: ${{ steps.find-comment.outputs.comment-id }}
                  issue-number: ${{ github.event.pull_request.number }}
                  body: |
                      ## HDR Processing Result

                      Generated at: ${{ github.event.pull_request.updated_at }}

                      ![HDR Result](${{ steps.upload-hdr.outputs.url }})

                      File size: ${{ steps.process-hdr.outputs.size }} bytes

                      <details>
                      <summary>Processing Details</summary>

                      - Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
                      - Commit: ${{ github.sha }}
                      - Branch: ${{ github.head_ref }}
                      - Go Version: ${{ steps.go-setup.outputs.go-version }}
                      - Duration: ${{ job.duration }}
                      </details>
                  edit-mode: replace

            - name: Upload input images on failure
              if: failure()
              run: |
                  for img in "low" "mid" "high"; do
                    - uses: McCzarny/upload-image@v1.0.0
                      id: upload-${{ img }}
                      with:
                        path: ${{ env.INPUT_DIR }}/${img}.jpg
                        uploadMethod: imgbb
                        apiKey: ${{ secrets.IMGBB_API_KEY }}
                  done

            - name: Comment failure details
              if: failure()
              uses: peter-evans/create-or-update-comment@v3
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  body: |
                      ## HDR Processing Failed - Input Images

                      Low exposure:
                      ![Low](${{ steps.upload-low.outputs.url }})

                      Mid exposure:
                      ![Mid](${{ steps.upload-mid.outputs.url }})

                      High exposure:
                      ![High](${{ steps.upload-high.outputs.url }})

                      Please check the workflow logs for more details.
